# all code below generated by ChatGPT

import pandas as pd
from sodapy import Socrata
import matplotlib.pyplot as plt
import seaborn as sns

# Connect to the data using the Socrata API
client = Socrata("data.cityofchicago.org", timeout=100, app_token=None)

# Get the data filtered by sr_type != '311 INFORMATION ONLY CALL' and sr_type != 'Aircraft Noise Complaint'
results = client.get("v6vf-nfxy", where="sr_type != '311 INFORMATION ONLY CALL' and sr_type != 'Aircraft Noise Complaint'", limit=1000000)

# Create the DataFrame
results_df = pd.DataFrame.from_records(results)

# Convert created_date and closed_date columns to datetime
results_df['created_date'] = pd.to_datetime(results_df['created_date'])
results_df['closed_date'] = pd.to_datetime(results_df['closed_date'])

# Compute the elapsed time in days and fractions of days
results_df['elapsed_time_open'] = (results_df['closed_date'] - results_df['created_date']).dt.total_seconds() / 86400

# exclude records with elapsed_time_open < 1.0
results_df = results_df[(results_df['elapsed_time_open'] >= 0) & (results_df['elapsed_time_open'] < 60)]

# create histogram
plt.figure(figsize=(10,5))
sns.distplot(results_df['elapsed_time_open'], bins=30, kde=False)
plt.xlabel('Elapsed Time Open (days)')
plt.title('Elapsed Time Open Histogram')
plt.show()

# Create a new DataFrame with only the records that have elapsed_time_open <= 5
results_df_5 = results_df[results_df['elapsed_time_open'] <= 5]

# Group the new DataFrame by sr_type and count the number of records
sr_type_counts = results_df_5.groupby('sr_type').size().reset_index(name='counts')

# Select only the sr_type with counts greater than 5000
sr_type_counts = sr_type_counts[sr_type_counts['counts'] > 5000]

# Create the bar chart
plt.figure(figsize=(20,8))
sns.barplot(x='sr_type', y='counts', data=sr_type_counts)
plt.xlabel('SR Type')
plt.ylabel('Number of Records')
plt.title('Number of records by SR Type for Elapsed Time Open <= 5 days')
plt.xticks(rotation=90)
plt.show()